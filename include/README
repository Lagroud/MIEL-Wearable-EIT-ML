# Bibliothèque BLE

Ce dossier contient les fichiers d'en-tête nécessaires à la gestion de la communication Bluetooth Low Energy (BLE) pour les appareils utilisant les bibliothèques NimBLE et M5Unified.

## Fichiers d'en-tête

### 1. `BLE_COMMUNICATION_H`

- **Description :** Déclare la classe singleton `BLECommunication` qui gère la communication BLE, y compris l'envoi et la réception de données, ainsi que la gestion de la connexion des appareils.
- **Classes :**
  - `BLECommunication`
- **Principales Méthodes :**
  - `void setTxCharacteristic(NimBLECharacteristic *characteristic)`
  - `NimBLECharacteristic *getTxCharacteristic() const`
  - `void sendCsvDataToClient(const String &str, double impedanceData[8][8])`
  - `void sendCsvEndMarker()`
  - `void setDeviceConnected(bool connected)`
  - `bool isDeviceConnected() const`
  - `void serialPrintBLEMacAddress()`
  - `static BLECommunication *getInstance()`

### 2. `BLE_CONFIG_H`

- **Description :** Définit les UUIDs pour le service BLE et les caractéristiques de transmission (Tx) et de réception (Rx).
- **Macros :**
  - `UUID_SERVICE`
  - `UUID_TX`
  - `UUID_RX`


### 3. `BLE_SERVER_CALLBACKS_H`

- **Description :** Déclare la classe `MyBLEServerCallbacks` pour gérer les callbacks du serveur BLE.
- **Classes :**
  - `MyBLEServerCallbacks`
- **Principales Méthodes :**
  - `void onConnect(NimBLEServer* pServer) override`
  - `void onDisconnect(NimBLEServer* pServer) override`

## Instructions

1. **Inclusion des fichiers d'en-tête :**
   Assurez-vous d'inclure les fichiers nécessaires dans votre projet en utilisant les directives `#include` appropriées.
   ```cpp
   #include "BLECommunication.h"
